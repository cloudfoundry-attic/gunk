// This file was generated by counterfeiter
package osfakes

import (
	real_os "os"
	"sync"

	"github.com/cloudfoundry/gunk/os_wrap"
)

type FakeOs struct {
	OpenStub        func(name string) (*real_os.File, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		name string
	}
	openReturns struct {
		result1 *real_os.File
		result2 error
	}
}

func (fake *FakeOs) Open(name string) (*real_os.File, error) {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		name string
	}{name})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(name)
	} else {
		return fake.openReturns.result1, fake.openReturns.result2
	}
}

func (fake *FakeOs) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeOs) OpenArgsForCall(i int) string {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].name
}

func (fake *FakeOs) OpenReturns(result1 *real_os.File, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 *real_os.File
		result2 error
	}{result1, result2}
}

var _ os_wrap.Os = new(FakeOs)
